{"version":3,"sources":["../src/view.js"],"names":["View","Collection","constructor","collection","predicate","_collection","_predicate","_onAdd","all","bind","_onUpdate","_onRemove","on","ACTION_ADD","ACTION_UPDATE","ACTION_REMOVE","destroy","removeListener","add","Error","clear","set","update","items","value","key","has","remove"],"mappings":";;;;;;;AAAA;;AACA;;AAEA;;;;;;;;AAIO,MAAMA,IAAN,SAAmBC,mBAAnB,CAA8B;AACnCC,EAAAA,WAAW,CAACC,UAAD,EAAaC,SAAb,EAAwB;AACjC;AAEA,SAAKC,WAAL,GAAmBF,UAAnB;AACA,SAAKG,UAAL,GAAkB,uBAAeF,SAAf,CAAlB;;AAGA,SAAKG,MAAL,CAAY,KAAKF,WAAL,CAAiBG,GAA7B;;AAGA,SAAKD,MAAL,GAAc,KAAKA,MAAL,CAAYE,IAAZ,CAAiB,IAAjB,CAAd;AACA,SAAKC,SAAL,GAAiB,KAAKA,SAAL,CAAeD,IAAf,CAAoB,IAApB,CAAjB;AACA,SAAKE,SAAL,GAAiB,KAAKA,SAAL,CAAeF,IAAf,CAAoB,IAApB,CAAjB;;AAGA,SAAKJ,WAAL,CAAiBO,EAAjB,CAAoBC,sBAApB,EAAgC,KAAKN,MAArC;;AACA,SAAKF,WAAL,CAAiBO,EAAjB,CAAoBE,yBAApB,EAAmC,KAAKJ,SAAxC;;AACA,SAAKL,WAAL,CAAiBO,EAAjB,CAAoBG,yBAApB,EAAmC,KAAKJ,SAAxC;AACD;;AAIDK,EAAAA,OAAO,GAAG;AACR,SAAKX,WAAL,CAAiBY,cAAjB,CAAgCJ,sBAAhC,EAA4C,KAAKN,MAAjD;;AACA,SAAKF,WAAL,CAAiBY,cAAjB,CAAgCH,yBAAhC,EAA+C,KAAKJ,SAApD;;AACA,SAAKL,WAAL,CAAiBY,cAAjB,CAAgCF,yBAAhC,EAA+C,KAAKJ,SAApD;AACD;;AAEDO,EAAAA,GAAG,GAAG;AACJ,UAAM,IAAIC,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAEDC,EAAAA,KAAK,GAAG;AACN,UAAM,IAAID,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAEDE,EAAAA,GAAG,GAAG;AACJ,UAAM,IAAIF,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM,IAAIH,KAAJ,CAAU,qBAAV,CAAN;AACD;;AAEDZ,EAAAA,MAAM,CAACgB,KAAD,EAAQ;AACZ,UAAoBnB,SAApB,GAAkC,IAAlC,CAAQE,UAAR;AAEA,0BAAQiB,KAAR,EAAe,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC7B,UAAIrB,SAAS,CAACoB,KAAD,EAAQC,GAAR,EAAa,IAAb,CAAb,EAAiC;AAI/B,cAAMJ,GAAN,CAAUI,GAAV,EAAeD,KAAf;AACD;AACF,KAPD;AAQD;;AAEDd,EAAAA,SAAS,CAACa,KAAD,EAAQ;AACf,UAAoBnB,SAApB,GAAkC,IAAlC,CAAQE,UAAR;AAEA,0BAAQiB,KAAR,EAAe,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC7B,UAAIrB,SAAS,CAACoB,KAAD,EAAQC,GAAR,EAAa,IAAb,CAAb,EAAiC;AAC/B,cAAMJ,GAAN,CAAUI,GAAV,EAAeD,KAAf;AACD,OAFD,MAEO,IAAI,MAAME,GAAN,CAAUD,GAAV,CAAJ,EAAoB;AACzB,cAAME,MAAN,CAAaF,GAAb;AACD;AACF,KAND;AAOD;;AAEDd,EAAAA,SAAS,CAACY,KAAD,EAAQ;AACf,0BAAQA,KAAR,EAAe,CAACC,KAAD,EAAQC,GAAR,KAAgB;AAC7B,UAAI,MAAMC,GAAN,CAAUD,GAAV,CAAJ,EAAoB;AAClB,cAAME,MAAN,CAAaF,GAAb;AACD;AACF,KAJD;AAKD;;AA5EkC","sourcesContent":["import createCallback from 'lodash/iteratee'\nimport forEach from 'lodash/forEach'\n\nimport Collection, { ACTION_ADD, ACTION_UPDATE, ACTION_REMOVE } from './collection'\n\n// ===================================================================\n\nexport class View extends Collection {\n  constructor(collection, predicate) {\n    super()\n\n    this._collection = collection\n    this._predicate = createCallback(predicate)\n\n    // Handles initial items.\n    this._onAdd(this._collection.all)\n\n    // Bound versions of listeners.\n    this._onAdd = this._onAdd.bind(this)\n    this._onUpdate = this._onUpdate.bind(this)\n    this._onRemove = this._onRemove.bind(this)\n\n    // Register listeners.\n    this._collection.on(ACTION_ADD, this._onAdd)\n    this._collection.on(ACTION_UPDATE, this._onUpdate)\n    this._collection.on(ACTION_REMOVE, this._onRemove)\n  }\n\n  // This method is necessary to free the memory of the view if its\n  // life span is shorter than the collection.\n  destroy() {\n    this._collection.removeListener(ACTION_ADD, this._onAdd)\n    this._collection.removeListener(ACTION_UPDATE, this._onUpdate)\n    this._collection.removeListener(ACTION_REMOVE, this._onRemove)\n  }\n\n  add() {\n    throw new Error('a view is read only')\n  }\n\n  clear() {\n    throw new Error('a view is read only')\n  }\n\n  set() {\n    throw new Error('a view is read only')\n  }\n\n  update() {\n    throw new Error('a view is read only')\n  }\n\n  _onAdd(items) {\n    const { _predicate: predicate } = this\n\n    forEach(items, (value, key) => {\n      if (predicate(value, key, this)) {\n        // super.add() cannot be used because the item may already be\n        // in the view if it was already present at the creation of\n        // the view and its event not already emitted.\n        super.set(key, value)\n      }\n    })\n  }\n\n  _onUpdate(items) {\n    const { _predicate: predicate } = this\n\n    forEach(items, (value, key) => {\n      if (predicate(value, key, this)) {\n        super.set(key, value)\n      } else if (super.has(key)) {\n        super.remove(key)\n      }\n    })\n  }\n\n  _onRemove(items) {\n    forEach(items, (value, key) => {\n      if (super.has(key)) {\n        super.remove(key)\n      }\n    })\n  }\n}\n"],"file":"view.js"}