"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.View = void 0;

var _iteratee = _interopRequireDefault(require("lodash/iteratee"));

var _forEach = _interopRequireDefault(require("lodash/forEach"));

var _collection = _interopRequireWildcard(require("./collection"));

function _getRequireWildcardCache(nodeInterop) { if (typeof WeakMap !== "function") return null; var cacheBabelInterop = new WeakMap(); var cacheNodeInterop = new WeakMap(); return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) { return nodeInterop ? cacheNodeInterop : cacheBabelInterop; })(nodeInterop); }

function _interopRequireWildcard(obj, nodeInterop) { if (!nodeInterop && obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(nodeInterop); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class View extends _collection.default {
  constructor(collection, predicate) {
    super();
    this._collection = collection;
    this._predicate = (0, _iteratee.default)(predicate);

    this._onAdd(this._collection.all);

    this._onAdd = this._onAdd.bind(this);
    this._onUpdate = this._onUpdate.bind(this);
    this._onRemove = this._onRemove.bind(this);

    this._collection.on(_collection.ACTION_ADD, this._onAdd);

    this._collection.on(_collection.ACTION_UPDATE, this._onUpdate);

    this._collection.on(_collection.ACTION_REMOVE, this._onRemove);
  }

  destroy() {
    this._collection.removeListener(_collection.ACTION_ADD, this._onAdd);

    this._collection.removeListener(_collection.ACTION_UPDATE, this._onUpdate);

    this._collection.removeListener(_collection.ACTION_REMOVE, this._onRemove);
  }

  add() {
    throw new Error('a view is read only');
  }

  clear() {
    throw new Error('a view is read only');
  }

  set() {
    throw new Error('a view is read only');
  }

  update() {
    throw new Error('a view is read only');
  }

  _onAdd(items) {
    const predicate = this._predicate;
    (0, _forEach.default)(items, (value, key) => {
      if (predicate(value, key, this)) {
        super.set(key, value);
      }
    });
  }

  _onUpdate(items) {
    const predicate = this._predicate;
    (0, _forEach.default)(items, (value, key) => {
      if (predicate(value, key, this)) {
        super.set(key, value);
      } else if (super.has(key)) {
        super.remove(key);
      }
    });
  }

  _onRemove(items) {
    (0, _forEach.default)(items, (value, key) => {
      if (super.has(key)) {
        super.remove(key);
      }
    });
  }

}

exports.View = View;
//# sourceMappingURL=view.js.map