"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Collection = exports.NoSuchItem = exports.NoSuchIndex = exports.InvalidKey = exports.IllegalTouch = exports.DuplicateItem = exports.DuplicateIndex = exports.BufferAlreadyFlushed = exports.ACTION_REMOVE = exports.ACTION_UPDATE = exports.ACTION_ADD = void 0;

var _kindof = _interopRequireDefault(require("kindof"));

var _makeError = require("make-error");

var _events = require("events");

var _lodash = require("lodash");

var _isEmpty = _interopRequireDefault(require("./is-empty"));

var _isObject = _interopRequireDefault(require("./is-object"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }

function _iterableToArrayLimit(arr, i) { var _i = arr && (typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"]); if (_i == null) return; var _arr = []; var _n = true; var _d = false; var _s, _e; try { for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

const createObject = Object.create,
      keys = Object.keys,
      hasOwnProperty = Object.prototype.hasOwnProperty;
const ACTION_ADD = 'add';
exports.ACTION_ADD = ACTION_ADD;
const ACTION_UPDATE = 'update';
exports.ACTION_UPDATE = ACTION_UPDATE;
const ACTION_REMOVE = 'remove';
exports.ACTION_REMOVE = ACTION_REMOVE;

class BufferAlreadyFlushed extends _makeError.BaseError {
  constructor() {
    super('buffer flush already requested');
  }

}

exports.BufferAlreadyFlushed = BufferAlreadyFlushed;

class DuplicateIndex extends _makeError.BaseError {
  constructor(name) {
    super('there is already an index with the name ' + name);
  }

}

exports.DuplicateIndex = DuplicateIndex;

class DuplicateItem extends _makeError.BaseError {
  constructor(key) {
    super('there is already a item with the key ' + key);
  }

}

exports.DuplicateItem = DuplicateItem;

class IllegalTouch extends _makeError.BaseError {
  constructor(value) {
    super('only an object value can be touched (found a ' + (0, _kindof.default)(value) + ')');
  }

}

exports.IllegalTouch = IllegalTouch;

class InvalidKey extends _makeError.BaseError {
  constructor(key) {
    super('invalid key of type ' + (0, _kindof.default)(key));
  }

}

exports.InvalidKey = InvalidKey;

class NoSuchIndex extends _makeError.BaseError {
  constructor(name) {
    super('there is no index with the name ' + name);
  }

}

exports.NoSuchIndex = NoSuchIndex;

class NoSuchItem extends _makeError.BaseError {
  constructor(key) {
    super('there is no item with the key ' + key);
  }

}

exports.NoSuchItem = NoSuchItem;

const assertValidKey = key => {
  if (!isValidKey(key)) {
    throw new InvalidKey(key);
  }
};

const isValidKey = key => typeof key === 'number' || typeof key === 'string';

class Collection extends _events.EventEmitter {
  constructor() {
    super();
    this._buffer = createObject(null);
    this._buffering = 0;
    this._indexes = createObject(null);
    this._indexedItems = createObject(null);
    this._items = createObject(null);
    this._size = 0;
  }

  getKey(value) {
    return value && value.id;
  }

  get all() {
    return this._items;
  }

  get indexes() {
    return this._indexedItems;
  }

  get size() {
    return this._size;
  }

  add(keyOrObjectWithId, valueIfKey = undefined) {
    const _this$_resolveItem = this._resolveItem(keyOrObjectWithId, valueIfKey),
          _this$_resolveItem2 = _slicedToArray(_this$_resolveItem, 2),
          key = _this$_resolveItem2[0],
          value = _this$_resolveItem2[1];

    this._assertHasNot(key);

    this._items[key] = value;
    this._size++;

    this._touch(ACTION_ADD, key);
  }

  clear() {
    keys(this._items).forEach(this._remove, this);
  }

  remove(keyOrObjectWithId) {
    const _this$_resolveItem3 = this._resolveItem(keyOrObjectWithId),
          _this$_resolveItem4 = _slicedToArray(_this$_resolveItem3, 1),
          key = _this$_resolveItem4[0];

    this._assertHas(key);

    this._remove(key);
  }

  set(keyOrObjectWithId, valueIfKey = undefined) {
    const _this$_resolveItem5 = this._resolveItem(keyOrObjectWithId, valueIfKey),
          _this$_resolveItem6 = _slicedToArray(_this$_resolveItem5, 2),
          key = _this$_resolveItem6[0],
          value = _this$_resolveItem6[1];

    const action = this.has(key) ? ACTION_UPDATE : ACTION_ADD;
    this._items[key] = value;

    if (action === ACTION_ADD) {
      this._size++;
    }

    this._touch(action, key);
  }

  touch(keyOrObjectWithId) {
    const _this$_resolveItem7 = this._resolveItem(keyOrObjectWithId),
          _this$_resolveItem8 = _slicedToArray(_this$_resolveItem7, 1),
          key = _this$_resolveItem8[0];

    this._assertHas(key);

    const value = this.get(key);

    if (!(0, _isObject.default)(value)) {
      throw new IllegalTouch(value);
    }

    this._touch(ACTION_UPDATE, key);

    return this.get(key);
  }

  unset(keyOrObjectWithId) {
    const _this$_resolveItem9 = this._resolveItem(keyOrObjectWithId),
          _this$_resolveItem10 = _slicedToArray(_this$_resolveItem9, 1),
          key = _this$_resolveItem10[0];

    if (this.has(key)) {
      this._remove(key);
    }
  }

  update(keyOrObjectWithId, valueIfKey = undefined) {
    const _this$_resolveItem11 = this._resolveItem(keyOrObjectWithId, valueIfKey),
          _this$_resolveItem12 = _slicedToArray(_this$_resolveItem11, 2),
          key = _this$_resolveItem12[0],
          value = _this$_resolveItem12[1];

    this._assertHas(key);

    this._items[key] = value;

    this._touch(ACTION_UPDATE, key);
  }

  get(key, defaultValue) {
    if (this.has(key)) {
      return this._items[key];
    }

    if (arguments.length > 1) {
      return defaultValue;
    }

    throw new NoSuchItem(key);
  }

  has(key) {
    return hasOwnProperty.call(this._items, key);
  }

  createIndex(name, index) {
    const indexes = this._indexes;

    if (hasOwnProperty.call(indexes, name)) {
      throw new DuplicateIndex(name);
    }

    indexes[name] = index;
    this._indexedItems[name] = index.items;

    index._attachCollection(this);
  }

  deleteIndex(name) {
    const indexes = this._indexes;

    if (!hasOwnProperty.call(indexes, name)) {
      throw new NoSuchIndex(name);
    }

    const index = indexes[name];
    delete indexes[name];
    delete this._indexedItems[name];

    index._detachCollection(this);
  }

  *[Symbol.iterator]() {
    const items = this._items;

    for (const key in items) {
      yield [key, items[key]];
    }
  }

  *keys() {
    const items = this._items;

    for (const key in items) {
      yield key;
    }
  }

  *values() {
    const items = this._items;

    for (const key in items) {
      yield items[key];
    }
  }

  bufferEvents() {
    ++this._buffering;
    let called = false;
    return () => {
      if (called) {
        throw new BufferAlreadyFlushed();
      }

      called = true;

      if (--this._buffering !== 0) {
        return;
      }

      const buffer = this._buffer;

      if ((0, _isEmpty.default)(buffer)) {
        return;
      }

      const data = {
        add: createObject(null),
        remove: createObject(null),
        update: createObject(null)
      };

      for (const key in this._buffer) {
        data[buffer[key]][key] = this._items[key];
      }

      (0, _lodash.forOwn)(data, (items, action) => {
        if (!(0, _isEmpty.default)(items)) {
          this.emit(action, items);
        }
      });
      this.emit('finish');
      this._buffer = createObject(null);
    };
  }

  _assertHas(key) {
    if (!this.has(key)) {
      throw new NoSuchItem(key);
    }
  }

  _assertHasNot(key) {
    if (this.has(key)) {
      throw new DuplicateItem(key);
    }
  }

  _remove(key) {
    delete this._items[key];
    this._size--;

    this._touch(ACTION_REMOVE, key);
  }

  _resolveItem(keyOrObjectWithId, valueIfKey = undefined) {
    if (valueIfKey !== undefined) {
      assertValidKey(keyOrObjectWithId);
      return [keyOrObjectWithId, valueIfKey];
    }

    if (isValidKey(keyOrObjectWithId)) {
      return [keyOrObjectWithId];
    }

    const key = this.getKey(keyOrObjectWithId);
    assertValidKey(key);
    return [key, keyOrObjectWithId];
  }

  _touch(action, key) {
    if (this._buffering === 0) {
      const flush = this.bufferEvents();
      process.nextTick(flush);
    }

    if (action === ACTION_ADD) {
      this._buffer[key] = key in this._buffer ? ACTION_UPDATE : ACTION_ADD;
    } else if (action === ACTION_REMOVE) {
      if (this._buffer[key] === ACTION_ADD) {
        delete this._buffer[key];
      } else {
        this._buffer[key] = ACTION_REMOVE;
      }
    } else {
      if (!(key in this._buffer)) {
        this._buffer[key] = ACTION_UPDATE;
      }
    }
  }

}

exports.Collection = Collection;
//# sourceMappingURL=collection.js.map